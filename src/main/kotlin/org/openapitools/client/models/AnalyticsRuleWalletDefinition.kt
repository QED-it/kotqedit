/**
* QEDIT - Asset Transfers
* This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/). 
*
* OpenAPI spec version: 1.8.0
* Contact: dev@qed-it.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models


import com.squareup.moshi.Json
/**
 * 
 * @param publicKey The public key of the Wallet that is being granted rights in this Rule
 * @param isAdmin Boolean signifying whether the Rule grants admin rights
 * @param namespace A `Namespace` describes what Asset IDs can be issued in an Issuance Rule. It is a string in the same format as `AssetId`. Additionally, if it ends with a wildcard character `*`, then the namespace covers all asset IDs with the namespace as a prefix. Without a final wildcard, the namespace covers exactly one asset ID. Example: The namespace `currencies.dollar` covers only this exact asset type, while `currencies.*` covers all asset types that start with `currencies.`. 
 * @param canIssueConfidentially Boolean signifying whether the Rule grants confidentialy issuance rights; if true, then both public and confidential issuance right are granted; if false, then only public issuance rights are granted
 * @param operation Operation of the transaction, which can be rule creation or deletion
 */
data class AnalyticsRuleWalletDefinition (
    /* The public key of the Wallet that is being granted rights in this Rule */
    val publicKey: kotlin.String? = null,
    /* Boolean signifying whether the Rule grants admin rights */
    val isAdmin: kotlin.Boolean? = null,
    /* A `Namespace` describes what Asset IDs can be issued in an Issuance Rule. It is a string in the same format as `AssetId`. Additionally, if it ends with a wildcard character `*`, then the namespace covers all asset IDs with the namespace as a prefix. Without a final wildcard, the namespace covers exactly one asset ID. Example: The namespace `currencies.dollar` covers only this exact asset type, while `currencies.*` covers all asset types that start with `currencies.`.  */
    val namespace: kotlin.String? = null,
    /* Boolean signifying whether the Rule grants confidentialy issuance rights; if true, then both public and confidential issuance right are granted; if false, then only public issuance rights are granted */
    val canIssueConfidentially: kotlin.Boolean? = null,
    /* Operation of the transaction, which can be rule creation or deletion */
    val operation: AnalyticsRuleWalletDefinition.Operation? = null
) {

    /**
    * Operation of the transaction, which can be rule creation or deletion
    * Values: createRule,deleteRule
    */
    enum class Operation(val value: kotlin.String){
    
        @Json(name = "CreateRule") createRule("CreateRule"),
    
        @Json(name = "DeleteRule") deleteRule("DeleteRule");
    
    }

}

