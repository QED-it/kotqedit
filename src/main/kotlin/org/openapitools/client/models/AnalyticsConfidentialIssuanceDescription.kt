/**
* QEDIT - Asset Transfers
* This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/). 
*
* OpenAPI spec version: 1.8.0
* Contact: dev@qed-it.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models


/**
 * The details and Proof attached to a confidential Issuance; null if the Issuance was public
 * @param casset The commitment to both the Asset Type and amount of the issued Note
 * @param namespace A `Namespace` describes what Asset IDs can be issued in an Issuance Rule. It is a string in the same format as `AssetId`. Additionally, if it ends with a wildcard character `*`, then the namespace covers all asset IDs with the namespace as a prefix. Without a final wildcard, the namespace covers exactly one asset ID. Example: The namespace `currencies.dollar` covers only this exact asset type, while `currencies.*` covers all asset types that start with `currencies.`. 
 * @param zkproof The Proof that the issued Asset Type indeed matches the reported Rule
 */
data class AnalyticsConfidentialIssuanceDescription (
    /* The commitment to both the Asset Type and amount of the issued Note */
    val casset: kotlin.String? = null,
    /* A `Namespace` describes what Asset IDs can be issued in an Issuance Rule. It is a string in the same format as `AssetId`. Additionally, if it ends with a wildcard character `*`, then the namespace covers all asset IDs with the namespace as a prefix. Without a final wildcard, the namespace covers exactly one asset ID. Example: The namespace `currencies.dollar` covers only this exact asset type, while `currencies.*` covers all asset types that start with `currencies.`.  */
    val namespace: kotlin.String? = null,
    /* The Proof that the issued Asset Type indeed matches the reported Rule */
    val zkproof: kotlin.String? = null
) {

}

