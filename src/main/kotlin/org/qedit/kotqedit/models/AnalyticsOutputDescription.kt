/**
* QEDIT - Asset Transfers
* This SDK provides a programmatic way for interacting with QEDIT's _Asset Transfer_ API. The specification definition file is publicly available [in this repository](https://github.com/QED-it/asset_transfers_dev_guide/). 
*
* OpenAPI spec version: 1.8.0
* Contact: dev@qed-it.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.qedit.kotqedit.models


/**
 * 
 * @param cv The commitment to both the Asset Type and amount of the Note
 * @param cm The commitment to the entire Note
 * @param zkproof The Proof that the commitments match
 * @param epk The ephemeral public key used to encrypt the Note contents for the receiver
 * @param encNote The Note encryption for the receiver
 * @param encSender The Note encryption for the sender
 * @param requireConfirmationFromRk The rerandomized (fully-anonymous) public key of the wallet that confirmed receipt of the output; identity of this wallet can only be recovered by the sending and confirming wallets (including view-only copies of these wallets); empty if no confirmation was requested
 */
data class AnalyticsOutputDescription (
    /* The commitment to both the Asset Type and amount of the Note */
    val cv: kotlin.String? = null,
    /* The commitment to the entire Note */
    val cm: kotlin.String? = null,
    /* The Proof that the commitments match */
    val zkproof: kotlin.String? = null,
    /* The ephemeral public key used to encrypt the Note contents for the receiver */
    val epk: kotlin.String? = null,
    /* The Note encryption for the receiver */
    val encNote: kotlin.String? = null,
    /* The Note encryption for the sender */
    val encSender: kotlin.String? = null,
    /* The rerandomized (fully-anonymous) public key of the wallet that confirmed receipt of the output; identity of this wallet can only be recovered by the sending and confirming wallets (including view-only copies of these wallets); empty if no confirmation was requested */
    val requireConfirmationFromRk: kotlin.String? = null
) {

}

